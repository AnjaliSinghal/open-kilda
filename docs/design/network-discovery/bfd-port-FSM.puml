Internal data
* BFD-discriminator
* isUp (initial false)

Internal signals
* fail

Input signals
* port-up
* port-down
* enable (ISL-FSM)
* disable (ISL-FSM)
* FL-ok (worker)
* FL-fail (worker)
* FL-timeout (worker)
* isl-move (ISL-FSM)

Output signals
* bfd-up
* bfd-down
* bfd-kill

@startuml
title BFD port FSM

[*] --> INIT

state initChoice <<choice>>
INIT --> initChoice : history / load persistence-data

initChoice --> IDLE : [BFD-discriminator is empty]
initChoice --> CLEANING : [BFD-discriminator is set]

IDLE --> INSTALLING : enable
IDLE -l-> FAIL : port-up

INSTALLING --> ACTIVE : port-up
INSTALLING --> CLEANING : FL-fail [match reuest-key] /\nreport error
INSTALLING --> CLEANING : isl-move
INSTALLING --> CLEANING : disable
INSTALLING --> FAIL : fail
INSTALLING : enter / allocate BFD-discriminator
INSTALLING : enter / emit BFD-session setup

state cleaningChoice <<choice>>

CLEANING --> cleaningChoice : FL-ok / release BFD-discriminator
CLEANING --> FAIL : FL-fail [match reuest-key] /\nreport error
CLEANING --> FAIL : fail
CLEANING : enter / emit BFD-session remove
CLEANING : port-up / set isUp = true
CLEANING : port-down / set isUp = false

cleaningChoice --> IDLE : [not isUp]
cleaningChoice --> WAIT_RELEASE : [isUp]

WAIT_RELEASE --> IDLE : port-down
WAIT_RELEASE : exit : set isUp = false

state ACTIVE {
    [*] --> UP

    UP --> DOWN : port-down
    UP : enter / emit bfd-up
    UP : enter / set isUp = true

    DOWN --> UP : port-up
    DOWN : enter / emit bfd-down
    DOWN : enter / set isUp = false
}
ACTIVE --> CLEANING : isl-move
ACTIVE --> CLEANING : disable
ACTIVE --> [*] : kill / emit bfd-kill

FAIL -r-> IDLE : port-down

@enduml
